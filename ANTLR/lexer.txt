lexer grammar StartASMLexer;

// Letter fragments
fragment A : [Aa];
fragment B : [Bb];
fragment C : [Cc];
fragment D : [Dd];
fragment E : [Ee];
fragment F : [Ff];
fragment G : [Gg];
fragment H : [Hh];
fragment I : [Ii];
fragment J : [Jj];
fragment K : [Kk];
fragment L : [Ll];
fragment M : [Mm];
fragment N : [Nn];
fragment O : [Oo];
fragment P : [Pp];
fragment Q : [Qq];
fragment R : [Rr];
fragment S : [Ss];
fragment T : [Tt];
fragment U : [Uu];
fragment V : [Vv];
fragment W : [Ww];
fragment X : [Xx];
fragment Y : [Yy];
fragment Z : [Zz];

fragment LOWERCASE: [a-z];
fragment UPPERCASE: [A-Z];
fragment DIGIT: [0-9];
fragment NUMBER: [0-9]+;

// Text, whitespace, and newlines
TEXT: ~[\r\n]+;
WHITESPACE: [ \t]+ -> skip;
NEWLINE: [\r]? '\n' | '\r';

VALUE: [0-9]+;

// Instruction Opcodes
MOVE: M O V E;
LOAD: L O A D;
STORE: S T O R E;
ADD: A D D;
SUBTRACT: S U B T R A C T;
MULTIPLY: M U L T I P L Y;
DIVIDE: D I V I D E;
OR: O R;
NOR: N O R;
XOR: X O R;
AND: A N D;
NOT: N O T;
INCREMENT: I N C R E M E N T;
DECREMENT: D E C R E M E N T;
SHIFT: S H I F T;
JUMP: J U M P;
PUSH: P U S H;
POP: P O P;
STOP: S T O P;
COMMENT: C O M M E N T;

// Directional Keywords
FROM: F R O M;
TO: T O;
WITH: W I T H;
BY: B Y;
IF: I F;

// Conditional Keywords
GREATER: G R E A T E R;
LESS: L E S S;
ZERO: Z E R O;

// Shifting Keywords
LEFT: L E F T;
RIGHT: R I G H T;
LOGICALLY: L O G I C A L L Y;
ARITHMETICALLY: A R I T H M E T I C A L L Y;

// Operands
REGISTER: R DIGIT;
INSTRUCTION: I NUMBER;
MEMORY: M NUMBER;





NEW LEXER???
lexer grammar StartASMLexer;

fragment LOWERCASE: [a-z];
fragment UPPERCASE: [A-Z];
fragment DIGIT: [0-9];
fragment NUMBER: [0-9]+;

//Instruction Words
MOVE: 'move';
LOAD: 'load';
STORE: 'store';
ADD: 'add';
SUBTRACT: 'subtract';
MULTIPLY: 'multiply';
DIVIDE: 'divide';
OR: 'or';
NOR: 'nor';
XOR: 'xor';
INCREMENT: 'increment';
DECREMENT: 'decrement';
SHIFT: 'shift';
JUMP: 'jump';
PUSH: 'push';
POP: 'pop';
STOP: 'stop';
COMMENT: 'comment';

//Context-dependant Instruction/Conjunction
AND: 'and';
NOT: 'not';

//Directional Conjunctions
FROM: 'from';
TO: 'to';
WITH: 'with';
BY: 'by';

//Conditional Conjunctions
IF: 'if';
GREATER: 'greater';
LESS: 'less';
ZERO: 'zero';

//Operands
REGISTER: 'r' DIGIT;
INSTRUCTION: 'i' NUMBER;
MEMORY: 'm' NUMBER;
VALUE: '0x' NUMBER;
STRING_LITERAL: '"' ~'"'* '"';

//Formatting
NEWLINE: '\r'? '\n' -> skip;
WHITESPACE: [ \t\r]+ -> skip;
TEXT: ~[\r\n]+;

