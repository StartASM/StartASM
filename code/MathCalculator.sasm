comment "Start by creating memory addresses for parsing the input string"
create memory m<0> to r0
create memory m<0> to r1
create memory m<1> to r2
create character = to r3

comment "Prompt the user for input"
print "Enter an expression (e.g., 5+3=): "
print newline

comment "Input loop for the string until the = character is detected"
label 'inputLoop'
input character to r4
compare r4 with r3
jump if equal to 'parseExpression'
store r4 to r1
add r1 with r2 to r1
jump if unconditional to 'inputLoop'

comment "Parse the expression - extract the numbers and the operation"
label 'parseExpression'
create integer 0 to r5
create integer 0 to r6
comment "create character nullvalue to r7"
create memory m<0> to r8
create boolean true to r9

label 'parseLoop'
load r8 to r4
compare r4 with r3
jump if equal to 'performCalculation'

compare r4 with +
jump if equal to 'storeOperation'
compare r4 with -
jump if equal to 'storeOperation'
compare r4 with *
jump if equal to 'storeOperation'
compare r4 with /
jump if equal to 'storeOperation'

sub r4 with 48 to r4
multiply r5 with 10 to r5
add r5 with r4 to r5
jump if unconditional to 'incrementParseIndex'

label 'storeOperation'
move r4 to r7
create integer 0 to r5
move false to r9

label 'incrementParseIndex'
add r8 with r2 to r8
jump if unconditional to 'parseLoop'

comment "Perform the calculation based on the operation"
label 'performCalculation'
compare r7 with +
jump if equal to 'addOperation'
compare r7 with -
jump if equal to 'subOperation'
compare r7 with *
jump if equal to 'mulOperation'
compare r7 with /
jump if equal to 'divOperation'

label 'addOperation'
add r5 with r6 to r5
jump if unconditional to 'outputResult'

label 'subOperation'
sub r5 with r6 to r5
jump if unconditional to 'outputResult'

label 'mulOperation'
multiply r5 with r6 to r5
jump if unconditional to 'outputResult'

label 'divOperation'
divide r5 with r6 to r5
jump if unconditional to 'outputResult'

comment "Output the result"
label 'outputResult'
print "Result: "
output r5
stop
